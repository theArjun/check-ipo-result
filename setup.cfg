[isort]
# Maximum length (columns) for a line of program code.
line_length = 79
# Number of blank lines to separate imports from following statements.
lines_after_imports = 2
# Filenames that â€˜isortâ€™ should not process.
skip =
# Names of sections that group import statements.
# The order in this sequence specifies the order the sections should appear.
sections =
    FUTURE
    STDLIB
    FRAMEWORK
    THIRDPARTY
    FIRSTPARTY
    LOCALFOLDER
# Name of section for any import statement of a package not known to â€˜isortâ€™.
default_section = THIRDPARTY
# Package names that are known for the â€˜FRAMEWORKâ€™ section.
known_framework =
# Package names that are known for the â€˜THIRDPARTYâ€™ section.
known_third_party =
# Package names that are known for the â€˜FIRSTPARTYâ€™ section.
known_first_party = ipo_result
# Text for indentation of continuation lines.
indent = '    '
# The multi-line import statement style (integer code).
# See the â€˜isortâ€™ documentation for the meaning of each code.
multi_line_output = 3
# Sort imports by length (not alphanumeric)?
length_sort = false
# Add a trailing comma on the list of â€˜fromâ€™ import names?
include_trailing_comma = true
# For continuation lines, wrap lines in parenthesis?
use_parentheses = true
# Sort â€˜from â€¦ importâ€™ statements before â€˜importâ€™ statements?
# This is not the ideal behaviour; see the issue reported at
# <URL:https://github.com/timothycrosley/isort/issues/609>.
from_first = false
# Force multiple names imported with â€˜fromâ€™ to be separate statements?
force_single_line = false
# Force â€˜fromâ€™ imports to be grid wrapped regardless of line length?
force_grid_wrap = true
# Format import statements as a visually-balanced grid?
balanced_wrapping = false
# Combine an â€˜import â€¦ as â€¦â€™ onto the same line?
combine_as_imports = true


[flake8]
# Specify the number of subprocesses that Flake8 will use to run checks in parallel.
jobs = auto
# Increase the verbosity of Flake8’s output.
verbose = 1
# Decrease the verbosity of Flake8’s output.
quiet = 0
# Select the formatter used to display errors to the user.
format = default
# Print the total number of errors.
count = True
# Print the source code generating the error/warning in question.
show-source = True
# Count the number of occurrences of each error/warning code and print a report.
statistics = True
# Redirect all output to the specified file.
output-file = .flake8.log
# Also print output to stdout if output-file has been configured.
tee = True
# Provide a comma-separated list of glob patterns to exclude from checks.
exclude =
    .env,
    .venv,
    .git,
    # python cache
    __pycache__,
# Provide a comma-separate list of glob patterns to include for checks.
filename =
    *.py
# Provide a custom list of builtin functions, objects, names, etc.
builtins =
# Report all errors, even if it is on the same line as a `# NOQA` comment.
disable-noqa = False
# Set the maximum length that any line (with some exceptions) may be.
max-line-length = 79
# Set the maximum allowed McCabe complexity value for a block of code.
max-complexity = 10
# Toggle whether pycodestyle should enforce matching the indentation of the opening bracket’s line.
# incluences E131 and E133
hang-closing = True
# Specify a list of codes to ignore.
ignore =
# Specify the list of error codes you wish Flake8 to report.
select =
    E,
    W,
    F,
    C
# Enable off-by-default extensions.
enable-extensions =
# Enable PyFlakes syntax checking of doctests in docstrings.
doctests = True
# Specify which files are checked by PyFlakes for doctest syntax.
include-in-doctest =
# Specify which files are not to be checked by PyFlakes for doctest syntax.
exclude-in-doctest =
